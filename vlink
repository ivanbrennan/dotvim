#!/usr/bin/env bash

set -e
shopt -s nullglob extglob

declare -r  DOTVIM=${DOTVIM:-$HOME/.vim}
declare -r  VIM_PLUGINS_DIR=${VIM_PLUGINS_DIR:-$HOME/Development/code/vim-plugins}
declare -ra STOWABLE_SUBDIRS=( after
                               autoload
                               colors
                               plugin )

usage() {
    local src=${BASH_SOURCE[0]} \
          subdirs="$(intercalate ',' ${STOWABLE_SUBDIRS[@]})"

    log 'Usage'
    printf '  %s dotvim TARGET\t\t%ssymlink ~/.vim to %sTARGET\n' $src $(tput sitm) $(tput sgr0)
    printf '  %s plug   NAME [-nv] \t%ssymlink {%s} to a local plugin %sNAME\n' $src $(tput sitm) "$subdirs" $(tput sgr0)
    printf '  %s replug NAME [-nv] \t%srelink {%s} to a local plugin %sNAME\n' $src $(tput sitm) "$subdirs" $(tput sgr0)
    printf '  %s unplug NAME [-nv] \t%sunlink {%s} from a local plugin %sNAME\n' $src $(tput sitm) "$subdirs" $(tput sgr0)
}

main() {
    assert_configured_dir 'user Vim' 'DOTVIM'
    assert_configured_dir 'Vim plugins source' 'VIM_PLUGINS_DIR'

    case $1 in
        dotvim)
            link_dotvim "$2" ;;
        plug)
            link_plugin "${@:2}" ;;
        unplug)
            unlink_plugin "${@:2}" ;;
        replug)
            relink_plugin "${@:2}" ;;
        *)
            usage
            exit 1 ;;
    esac
}

link_dotvim() {
    local target=$1

    if [ ! -d "$target" ]; then
        log 'Error' "$target is not a directory we can symlink to."
        exit 1
    fi

    if [ -d ~/.vim ] && [ ! -L ~/.vim ]; then
        local -r backup=~/.vim.$(date +%s)
        log 'Info' "Backing up existing ~/.vim to $backup"
        mv ~/.vim $backup
    fi

    ln -svnf $target ~/.vim
}

link_plugin() {
  run_stow --stow "$@"
}

unlink_plugin() {
  run_stow --delete "$@"
}

relink_plugin() {
  run_stow --restow "$@"
}

run_stow() {
  assert_stow_installed

  local -r operation=$1 name=$2

  for arg in "${@:3}"; do
    case "$arg" in
      -nv|-vn)
        local dryrun=1 verbose=1 ;;
      -n|--no)
        local dryrun=1 ;;
      -v|--verbose)
        local verbose=1 ;;
      *)
        usage
        exit 1 ;;
    esac
  done

  if [ -z $name ]; then
    log 'Error' 'Missing NAME argument' && usage
    exit 1
  fi

  local -r projectpath=$VIM_PLUGINS_DIR/$name

  if [ ! -d $projectpath ]; then
    log 'Error' "Unable to locate plugin \"$name\""
    exit 1
  fi

  if [ "$operation" == '--stow' ] && ! stowable_contents $projectpath; then
    log 'WARN' "Nothing to link in {$(intercalate ',' ${STOWABLE_SUBDIRS[@]})}"
    exit 1
  fi

  local -r parent_dir=${projectpath%/*} \
           target_dir=$(readlink -f $DOTVIM) \
           stowable="($(intercalate '|' ${STOWABLE_SUBDIRS[@]}))"

  stow --dir=$parent_dir \
       --target=$target_dir \
       --ignore="^(?!$stowable).+" \
       --verbose=${verbose:-0} \
       ${dryrun+--no} \
       $operation \
       $name && log 'Success' "operation complete"
}

assert_stow_installed() {
  if ! command -v stow >/dev/null; then
    log 'Error' 'This command requires stow'
    echo https://www.gnu.org/software/stow
    exit 1
  fi
}

stowable_contents() {
  local -r projectpath=$1 \
           glob="@($(intercalate '|' ${STOWABLE_SUBDIRS[@]}))"

  compgen -G "$projectpath/$glob" >/dev/null
}

intercalate() {
  local IFS="$1"
  shift
  echo "$*"
}

log() {
  local title=$1 msg=$2
  printf '%s%s%s: %s\n' $(tput bold) "$title" $(tput sgr0) "$msg"
}

assert_configured_dir() {
    local name=$1 var=$2

    if [ ! -d "${!var}" ]; then
        log 'Error' "No $name directory found at ${!var}"
        echo "Set a \$$var environment variable to specify a location."
        exit 1
    fi
}

main "$@"
